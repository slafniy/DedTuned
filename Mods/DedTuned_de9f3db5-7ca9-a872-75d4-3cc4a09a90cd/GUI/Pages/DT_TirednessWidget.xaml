<ls:UIWidget x:Name="TirednessWidget"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ls="clr-namespace:ls;assembly=Code"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"

             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             d:DesignHeight="2160" d:DesignWidth="3840"
             ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">


    <ls:UIWidget.Template>
        <ControlTemplate>
            <ControlTemplate.Resources>
                <System:Int16 x:Key="MaxDeckColumns">16</System:Int16>
                <System:Double x:Key="HotbarSlotSize">88</System:Double>
                <System:Double x:Key="HotbarSlotIconSize">88</System:Double>
                <System:Double x:Key="HotbarSlotSpacing">0</System:Double>
                <System:Double x:Key="HotbarAttackSlotSize">80</System:Double>
                <System:Double x:Key="ClassIconSize">160</System:Double>

                <System:Double x:Key="MinimalistSlotSize">88</System:Double>
                <System:Double x:Key="MinimalistHotbarThreshold">12</System:Double>

                <System:TimeSpan x:Key="StopDragDuration">0:0:0.2</System:TimeSpan>
                <System:TimeSpan x:Key="DeckResizeDuration">0:0:0.5</System:TimeSpan>
                <Duration x:Key="SingleHotbarAnimationsDuration">0:0:0.2</Duration>
                <Duration x:Key="ExtraDecksResizeDuration">0:0:0.5</Duration>
                <Duration x:Key="ShowConcertinaDuration">0:0:0.1</Duration>

                <KeyTime x:Key="RestButtonAnimationTime">0:0:0.3</KeyTime>

                <!-- How many statuses to show before limiting. Multiples of 3. Update both! -->
                <System:Double x:Key="StatusLimitAmount">9</System:Double>
                <System:Double x:Key="StatusLimitAmountInverse">-9</System:Double>

                <Thickness x:Key="ResourceBackgroundMargin">0</Thickness>
                <Thickness x:Key="ClassIconMargin">0,16,0,51</Thickness>
                <Thickness x:Key="TurnButtonMargin">0,0,174,34</Thickness>
                <Thickness x:Key="EndTurnButtonMargin">0,0,183,42</Thickness>
                <Thickness x:Key="FleeButtonMargin">0,0,25,76</Thickness>

                <Thickness x:Key="FixedHotbarHiddenMargin">1600,6,0,-6</Thickness>
                <Thickness x:Key="FixedHotbarMargin">0,6,0,-6</Thickness>
                <Thickness x:Key="SingleHotbarHiddenMargin">0,300,0,-300</Thickness>
                <Thickness x:Key="SingleHotbarMargin">0,0,0,1</Thickness>
                <Thickness x:Key="SingleHotbarFromLeftHiddenMargin">-1000,0,0,1</Thickness>
                <Thickness x:Key="SingleHotbarFromLeftMargin">0,0,0,1</Thickness>

                <BitmapImage x:Key="OverlayMessageBackground"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/overlay_message.png"/>
                <BitmapImage x:Key="HotbarDivider"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/vertical_divider_double.png"/>

                <!--ANIMATE CONCERTINA HANDLES-->
                <Storyboard x:Key="FadeSlidersOutAnim" FillBehavior="Stop">
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                                                   Storyboard.TargetName="PART_SizerThumb">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="PART_SizerThumb" Storyboard.TargetProperty="Opacity"
                                     From="1" To="0" Duration="0:0:0.2">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>

                </Storyboard>
                <Storyboard x:Key="FadeSlidersInAnim" FillBehavior="Stop">
                    <DoubleAnimation Storyboard.TargetName="PART_SizerThumb" Storyboard.TargetProperty="Opacity"
                                     From="0" To="1" Duration="0:0:0.2">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <ControlTemplate x:Key="FloatingFrameButton" TargetType="ls:LSButton">
                    <ControlTemplate.Resources>
                        <BitmapImage x:Key="FloatingFrame"
                                     UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_floatingFrame_d.png"/>
                        <BitmapImage x:Key="SmallFocus"
                                     UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_focus_d.png"/>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Image x:Name="bg" Source="{StaticResource FloatingFrame}" Stretch="None"/>
                        <Image x:Name="bgImg" Source="{StaticResource SmallFocus}" Stretch="None"/>
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_focus_h.png"
                                    TargetName="bgImg"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_focus_p.png"
                                    TargetName="bgImg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Style x:Key="BottomLinksMarkerStyle" TargetType="ls:LSNineSliceImage"
                       BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="VerticalAlignment" Value="Top"/>
                    <Setter Property="IsHitTestVisible" Value="False"/>
                    <Setter Property="ImageSource"
                            Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_inactivemod_d.png"/>
                    <Setter Property="Slices" Value="12"/>
                    <Setter Property="MinWidth" Value="44"/>
                    <Setter Property="Height" Value="20"/>
                    <Setter Property="Margin" Value="0,-8,0,0"/>
                    <Setter Property="Visibility" Value="Collapsed"/>
                </Style>

                <BitmapImage x:Key="FilterButtonBackground"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_d.png"/>
                <BitmapImage x:Key="NewContentMarker1"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterLevelup/levelUp_exclamation_h1.png"/>
                <BitmapImage x:Key="NewContentMarker2"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterLevelup/levelUp_exclamation_h2.png"/>

                <ControlTemplate x:Key="FilterButton" TargetType="{x:Type ls:LSButton}">
                    <Grid>
                        <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource FilterButtonBackground}"
                                             Slices="36" Padding="10"
                                             MinWidth="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}">
                            <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                       Style="{StaticResource BtnTextGlow}" Foreground="{TemplateBinding Foreground}"
                                       FontSize="{TemplateBinding FontSize}" Margin="10" VerticalAlignment="Center"
                                       HorizontalAlignment="Stretch" TextTrimming="CharacterEllipsis"
                                       TextAlignment="Center"/>
                        </ls:LSNineSliceImage>

                        <Image x:Name="NewContentMarker" Visibility="Collapsed" Stretch="None"
                               HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,-26,10,0"
                               IsHitTestVisible="False" RenderTransformOrigin="0.5,0.5">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                                </TransformGroup>
                            </Image.RenderTransform>
                        </Image>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger
                                Binding="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=200}"
                                Value="True">
                            <Setter TargetName="bg" Property="MinWidth" Value="200"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="ImageSource" TargetName="bg"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="ImageSource" TargetName="bg"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_p.png"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="ImageSource" TargetName="bg"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_disabled.png"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="NewContent">
                            <Setter TargetName="NewContentMarker" Property="Visibility" Value="Visible"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="NewContentMarkerAnimation">
                                    <Storyboard RepeatBehavior="Forever">
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NewContentMarker"
                                                                       Storyboard.TargetProperty="Source"
                                                                       Duration="0:0:1">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0"
                                                                    Value="{StaticResource NewContentMarker1}"/>
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.5"
                                                                    Value="{StaticResource NewContentMarker2}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="NewContentMarkerAnimation"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <BitmapImage x:Key="ActiveFilterButtonBackground"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_active_d.png"/>

                <ControlTemplate x:Key="ActiveFilterButton" TargetType="{x:Type ls:LSButton}">
                    <Grid>
                        <ls:LSNineSliceImage x:Name="bg" ImageSource="{StaticResource ActiveFilterButtonBackground}"
                                             Slices="36" Padding="10"
                                             MinWidth="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}">
                            <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                       Style="{StaticResource BtnTextGlow}" Foreground="{TemplateBinding Foreground}"
                                       FontSize="{TemplateBinding FontSize}" Margin="10" VerticalAlignment="Center"
                                       HorizontalAlignment="Stretch" TextTrimming="CharacterEllipsis"
                                       TextAlignment="Center"/>
                        </ls:LSNineSliceImage>

                        <ls:LSNineSliceImage x:Name="Marker" Style="{StaticResource BottomLinksMarkerStyle}"
                                             Width="{Binding ActualWidth, ElementName=bg, Converter={StaticResource AddConverter}, ConverterParameter=-80}"
                                             Visibility="Visible">
                            <Image Source="{StaticResource ActiveModArrow}" Stretch="None" VerticalAlignment="Center"
                                   Margin="0,4,0,-4"/>
                        </ls:LSNineSliceImage>

                        <Image x:Name="NewContentMarker" Visibility="Collapsed" Stretch="None"
                               HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,-26,10,0"
                               IsHitTestVisible="False" RenderTransformOrigin="0.5,0.5">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                                </TransformGroup>
                            </Image.RenderTransform>
                        </Image>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger
                                Binding="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=200}"
                                Value="True">
                            <Setter TargetName="bg" Property="MinWidth" Value="200"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="ImageSource" TargetName="bg"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_active_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="ImageSource" TargetName="bg"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_active_p.png"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="ImageSource" TargetName="bg"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_active_disabled.png"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="NewContent">
                            <Setter TargetName="NewContentMarker" Property="Visibility" Value="Visible"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="NewContentMarkerAnimation">
                                    <Storyboard RepeatBehavior="Forever">
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="NewContentMarker"
                                                                       Storyboard.TargetProperty="Source"
                                                                       Duration="0:0:1">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0"
                                                                    Value="{StaticResource NewContentMarker1}"/>
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.5"
                                                                    Value="{StaticResource NewContentMarker2}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="NewContentMarkerAnimation"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Style x:Key="BottomLinksStyle" TargetType="ls:LSButton">
                    <Setter Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                    <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
                    <Setter Property="Margin" Value="-4,0"/>
                    <Setter Property="Template" Value="{StaticResource FilterButton}"/>
                </Style>

                <Style x:Key="BottomDividerImageStyle" TargetType="Image">
                    <Setter Property="Source"
                            Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_divider.png"/>
                    <Setter Property="Margin" Value="-30,6, -30, 0"/>
                    <Setter Property="Stretch" Value="None"/>
                    <Setter Property="VerticalAlignment" Value="Top"/>
                </Style>

                <ImageBrush x:Key="HotbarSlotBackground"
                            ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/hotbarSlot.png"/>
                <ImageBrush x:Key="HotbarSlotBackgroundTiles" AlignmentX="Left" AlignmentY="Top"
                            ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/hotbarSlot_bg.png"
                            TileMode="Tile" Stretch="None" ViewboxUnits="Absolute" ViewportUnits="Absolute"
                            Viewbox="0,0,88,88" Viewport="0,0,88,88"/>


                <System:Double x:Key="FullWidth">1498.0</System:Double>
                <System:Double x:Key="DeckWidth">1498.0</System:Double>
                <System:Double x:Key="DeckWidthShapeshift">1450.0</System:Double>
                <Thickness x:Key="DeckMarginShapeshift">52,26,36,16</Thickness>

                <!--ITEMS eg THROW-->
                <ControlTemplate x:Key="ItemsControlDeckTemplate" TargetType="ListBox">
                    <ScrollViewer x:Name="ContainerScroller" Style="{StaticResource NoForcedScrollViewerStyle}"
                                  ls:ScrollViewerHelper.MouseWheelScrollsHorizontally="True"
                                  Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="0" Padding="0,0,0,28" Focusable="False"
                                  VerticalScrollBarVisibility="Disabled" HorizontalScrollBarVisibility="Visible"
                                  CanContentScroll="{Binding CellColumns, Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource MaxDeckColumns}}"
                                  Margin="0,0,0,-28">
                        <ItemsPresenter/>
                    </ScrollViewer>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Tag,RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     Value="HideScrollbar">
                            <Setter TargetName="ContainerScroller" Property="HorizontalScrollBarVisibility"
                                    Value="Disabled"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
                                        Binding="{Binding DataContext.CurrentShownDeck, RelativeSource={RelativeSource AncestorType=ls:UIWidget}, Converter={StaticResource NullToBoolFalseConverter}}"
                                        Value="True"/>
                                <Condition
                                        Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=True}"
                                        Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContainerScroller" Property="HorizontalScrollBarVisibility"
                                    Value="Auto"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <DataTemplate x:Key="HotBarTemplate" DataType="{x:Type ls:VMHotBar}">
                    <Grid HorizontalAlignment="Stretch" Background="{x:Null}">
                        <ListBox x:Name="HotbarItemsList" HorizontalContentAlignment="Right"
                                 ItemsSource="{Binding SlotList}"
                                 Width="{Binding ContainerWidth, RelativeSource={RelativeSource AncestorType=ls:ConcertinaItem}}"
                                 Template="{DynamicResource ItemsControlDeckTemplate}">
                            <b:Interaction.Behaviors>
                                <ls:WidgetDataConnectionBehavior/>
                            </b:Interaction.Behaviors>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="ListBoxItem">
                                                <ls:LSButton x:Name="contentContainer"
                                                             ls:WidgetData.DataContext="{Binding Path=(ls:WidgetData.DataContext), RelativeSource={RelativeSource TemplatedParent}}"
                                                             Style="{StaticResource HotBarSlotStyle}"
                                                             Content="{TemplateBinding Content}"/>
                                                <ControlTemplate.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition
                                                                    Binding="{Binding (ls:WidgetData.DataContext).CurrentActiveSlot.SlotType, RelativeSource={RelativeSource TemplatedParent}}"
                                                                    Value="Item"/>
                                                            <!--GUS-210767: When CanHideActiveSlotFilter is True it means we're in a weapon filter and this is an item there (i.e. an arrow in a bow filter), so we DON'T want to change the owner for the hotbar tooltips-->
                                                            <Condition
                                                                    Binding="{Binding (ls:WidgetData.DataContext).CanHideActiveSlotFilter, RelativeSource={RelativeSource TemplatedParent}}"
                                                                    Value="False"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter TargetName="contentContainer"
                                                                Property="ls:TooltipExtender.Owner"
                                                                Value="{Binding (ls:WidgetData.DataContext).CurrentActiveSlot.GameObject, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                    </MultiDataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <ls:LSGrid x:Name="Container" Columns="{Binding CellColumns}"
                                               Rows="{Binding NumberOfBars}" ExtendedRows="False" Orientation="Vertical"
                                               Background="{x:Null}"
                                               CellWidth="{StaticResource HotbarSlotIconSize}"
                                               CellHeight="{StaticResource HotbarSlotIconSize}" IndexParam="SlotIndex"
                                               HorizontalSpacing="{StaticResource HotbarSlotSpacing}"
                                               VerticalSpacing="{StaticResource HotbarSlotSpacing}"
                                               AutoIndex="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}"
                                               VerticalAlignment="Top">
                                        <b:Interaction.Behaviors>
                                            <!--AllowDrop is an inherited property for any FrameworkElement, so the first one we find is ok-->
                                            <ls:DropOnInventoryGridBehavior
                                                    DropCommand="{Binding DataContext.DropOnHotBarCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                    AllowDrop="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=AllowDrop}"/>
                                            <ls:DragGameObjectGridBehavior
                                                    StartDragCommand="{Binding DataContext.DragSlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                    DragDisabledSoundID="UI_HUD_HotBar_Ability_DragDisabled">
                                                <ls:DragGameObjectGridBehavior.AllowDrag>
                                                    <MultiBinding Converter="{StaticResource BoolAndConverter}">
                                                        <Binding Path="AllowDrop"
                                                                 RelativeSource="{RelativeSource AncestorType={x:Type FrameworkElement}}"/>
                                                        <Binding
                                                                Path="DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.HotBarUnlocked"
                                                                RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                    </MultiBinding>
                                                </ls:DragGameObjectGridBehavior.AllowDrag>
                                            </ls:DragGameObjectGridBehavior>
                                        </b:Interaction.Behaviors>
                                        <b:Interaction.Triggers>
                                            <b:DataTrigger
                                                    Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=AllowDrop}"
                                                    Value="True">
                                                <b:ChangePropertyAction PropertyName="Background" TargetName="Container"
                                                                        Value="{StaticResource HotbarSlotBackgroundTiles}"/>
                                            </b:DataTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSGrid>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>
                        <StackPanel x:Name="BottomFilterExtraData" Orientation="Horizontal" VerticalAlignment="Bottom"
                                    HorizontalAlignment="Left" Height="90" Visibility="Collapsed"
                                    DataContext="{x:Null}" Background="{x:Null}">
                            <TextBlock Text="{Binding Name}" VerticalAlignment="Center"
                                       Foreground="{StaticResource LS_tint100}"
                                       FontSize="{StaticResource MediumFontSize}"/>
                            <ItemsControl Margin="50,0,0,0" Style="{StaticResource ActiveConditionsSection}"
                                          VerticalAlignment="Center"
                                          ItemTemplate="{StaticResource ActiveConditionBasicTemplate}"
                                          ItemsSource="{Binding NonPermanentStatusEffects}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </StackPanel>

                    </Grid>
                    <DataTemplate.Triggers>
                        <Trigger Property="ActualWidth" Value="{StaticResource FullWidth}">
                            <Setter TargetName="HotbarItemsList" Property="ScrollViewer.HorizontalScrollBarVisibility"
                                    Value="Auto"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
                                        Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=False}"
                                        Value="False"/>
                                <Condition
                                        Binding="{Binding IsFullSize, RelativeSource={RelativeSource AncestorType={x:Type ls:ConcertinaItem}}}"
                                        Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="HotbarItemsList" Property="Width" Value="{StaticResource FullWidth}"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Tag,RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                     Value="HideScrollbar">
                            <Setter TargetName="HotbarItemsList" Property="ScrollViewer.HorizontalScrollBarVisibility"
                                    Value="Disabled"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HotBarType}" Value="InvalidHotBar"/>
                                <Condition
                                        Binding="{Binding DataContext.CurrentActiveSlot.Spell.WeaponActionType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="Melee"/>
                                <Condition
                                        Binding="{Binding DataContext.IsSelectingUpcastedSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="False"/>
                                <Condition
                                        Binding="{Binding DataContext.IsShowingAContainerWithVariants, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BottomFilterExtraData" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BottomFilterExtraData" Property="DataContext"
                                    Value="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.MeleeMainHand.Item, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HotBarType}" Value="InvalidHotBar"/>
                                <Condition
                                        Binding="{Binding DataContext.CurrentActiveSlot.Spell.WeaponActionType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="Ranged"/>
                                <Condition
                                        Binding="{Binding DataContext.IsSelectingUpcastedSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="False"/>
                                <Condition
                                        Binding="{Binding DataContext.IsShowingAContainerWithVariants, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BottomFilterExtraData" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BottomFilterExtraData" Property="DataContext"
                                    Value="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.RangedMainHand.Item, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HotBarType}" Value="InvalidHotBar"/>
                                <Condition
                                        Binding="{Binding DataContext.CurrentActiveSlot.GameObject.UseType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="Arrow"/>
                                <Condition
                                        Binding="{Binding DataContext.IsSelectingUpcastedSpell, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="False"/>
                                <Condition
                                        Binding="{Binding DataContext.IsShowingAContainerWithVariants, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BottomFilterExtraData" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BottomFilterExtraData" Property="DataContext"
                                    Value="{Binding DataContext.CurrentPlayer.SelectedCharacter.Equipment.RangedMainHand.Item, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HotBarType}" Value="InvalidHotBar"/>
                                <Condition
                                        Binding="{Binding DataContext.IsShowingAContainerWithVariants, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="True"/>
                                <Condition
                                        Binding="{Binding DataContext.SingleHotBar.SlotList.Count, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource MinimalistHotbarThreshold}}"
                                        Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <!-- We will use this as background, but elements will be shown in MinimalistContainer -->
                            <Setter TargetName="HotbarItemsList" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <DataTrigger
                                Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=False}"
                                Value="True">
                            <Setter TargetName="HotbarItemsList" Property="ScrollViewer.HorizontalScrollBarVisibility"
                                    Value="Disabled"/>
                            <Setter TargetName="HotbarItemsList" Property="IsHitTestVisible" Value="False"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>

                <BitmapImage x:Key="ConcertinaShutter"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutter_d.png"/>
                <BitmapImage x:Key="ConcertinaShutterMore"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_shutter_more.png"/>

                <ControlTemplate x:Key="HotbarItemTemplate" TargetType="ls:ConcertinaItem">
                    <StackPanel x:Name="Root" Orientation="Horizontal" HorizontalAlignment="Stretch"
                                VerticalAlignment="Top" ClipToBounds="False"
                                d:DataContext="{d:DesignInstance {x:Type ls:VMHotBar}}">
                        <ContentPresenter ContentTemplate="{StaticResource HotBarTemplate}"/>
                        <Border x:Name="PART_SizerThumb" VerticalAlignment="Stretch" HorizontalAlignment="Right">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="MouseEnter">
                                    <b:InvokeCommandAction
                                            Command="{Binding DataContext.SetCursorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                            CommandParameter="Resize"/>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="MouseLeave">
                                    <b:InvokeCommandAction
                                            Command="{Binding DataContext.SetCursorCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                            CommandParameter=""/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <Grid x:Name="ShutterZone" Width="36" ClipToBounds="False" HorizontalAlignment="Right">

                                <Image x:Name="Shutter" Stretch="UniformToFill" HorizontalAlignment="Center"
                                       VerticalAlignment="Stretch" Source="{StaticResource ConcertinaShutter}"
                                       Margin="0,0,0,-8">
                                    <Image.Effect>
                                        <DropShadowEffect BlurRadius="20" ShadowDepth="-4" Opacity="1"
                                                          Color="{StaticResource tint20}"/>
                                    </Image.Effect>
                                </Image>
                                <Image x:Name="Overflow" Stretch="None" HorizontalAlignment="Left"
                                       VerticalAlignment="Center" Source="{StaticResource ConcertinaShutterMore}"
                                       Margin="-20,0,0,0" Visibility="Collapsed"/>
                            </Grid>
                        </Border>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger
                                Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                Value="3">
                            <Setter TargetName="Shutter" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterX3_d.png"/>
                        </DataTrigger>
                        <DataTrigger
                                Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                Value="4">
                            <Setter TargetName="Shutter" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterX4_d.png"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_SizerThumb}" Value="True">
                            <Setter TargetName="Shutter" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutter_h.png"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_SizerThumb}" Value="True"/>
                                <Condition
                                        Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="2"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shutter" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutter_h.png"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_SizerThumb}" Value="True"/>
                                <Condition
                                        Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="3"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shutter" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterX3_h.png"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_SizerThumb}" Value="True"/>
                                <Condition
                                        Binding="{Binding DataContext.NumberOfRows, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        Value="4"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Shutter" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterX4_h.png"/>
                        </MultiDataTrigger>

                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                    <Binding Path="LastUsedColumn"/>
                                    <Binding Path="CellColumns" Converter="{StaticResource AddConverter}"
                                             ConverterParameter="1"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="Overflow" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger
                                Binding="{Binding Path=IsAnimatingFullyResizedItem, RelativeSource={RelativeSource AncestorType={x:Type ls:Concertina}}, FallbackValue=True}"
                                Value="True">
                            <Setter TargetName="Overflow" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding HotBarType}" Value="ItemHotBar">
                            <Setter TargetName="Shutter" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_SizerThumb" Property="IsHitTestVisible" Value="False"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=IsFixedSize}" Value="True">
                            <Setter TargetName="PART_SizerThumb" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger
                                Binding="{Binding DataContext.CurrentShownDeck, RelativeSource={RelativeSource AncestorType=ls:UIWidget}, Converter={StaticResource NullToBoolFalseConverter}}"
                                Value="True">
                            <Setter TargetName="PART_SizerThumb" Property="Visibility" Value="Collapsed"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="FadeSlidersOut"
                                                 Storyboard="{StaticResource FadeSlidersOutAnim}"/>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard x:Name="FadeSlidersIn"
                                                 Storyboard="{StaticResource FadeSlidersInAnim}"/>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>


                <!-- ===== STYLE TRIGGERS FOR WEAPON TOGGLE ===== -->
                <Style x:Key="WeaponSetSwitchStyle" TargetType="ls:LSRadioButton">
                    <Setter Property="BoundEvent" Value="ToggleWeaponSet"/>
                    <Setter Property="VerticalAlignment" Value="Top"/>
                    <Setter Property="IsEnabled" Value="False"/>
                    <Setter Property="ToolTipService.Placement" Value="Center"/>
                    <Setter Property="ToolTipService.VerticalOffset" Value="-80"/>
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                    <Setter Property="GroupName" Value="WeaponSetSwitchGroup"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ls:LSRadioButton">
                                <Grid>
                                    <Image x:Name="bg" Source="{DynamicResource BtnWeaponsToggle}" Stretch="None"/>
                                    <Image x:Name="icon" Source="{DynamicResource WeaponSetIcon}" Stretch="None"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="bg" Property="Source"
                                                Value="{DynamicResource WeaponSetBgHover}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter TargetName="bg" Property="Source"
                                                Value="{DynamicResource WeaponSetBgPressed}"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter TargetName="bg" Property="Source"
                                                Value="{DynamicResource WeaponSetBgNormalActive}"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="True"/>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="bg" Property="Source"
                                                Value="{DynamicResource WeaponSetBgHoverActive}"/>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="True"/>
                                            <Condition Property="IsPressed" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="bg" Property="Source"
                                                Value="{DynamicResource WeaponSetBgPressedActive}"/>
                                    </MultiTrigger>

                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="False"/>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                        </MultiTrigger.Conditions>
                                    </MultiTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsChecked" Value="False"/>
                                            <Condition Property="IsPressed" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="icon" Property="Margin" Value="0,0,0,-4"/>
                                    </MultiTrigger>
                                    <Trigger Property="IsChecked" Value="False">
                                        <Setter TargetName="icon" Property="Opacity" Value="0.8"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>

                        <!--Are Weapon Toggles Available-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BoundEvent" Value="{x:Null}"/>
                        </Trigger>

                    </Style.Triggers>
                </Style>

                <BitmapImage x:Key="FrameWeaponSlotHover"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/frame_weaponSlot_h.png"/>

                <ControlTemplate x:Key="WeaponSlotTemplate" TargetType="Button">
                    <Grid x:Name="Root" ToolTipService.Placement="Top" ToolTipService.VerticalOffset="-60"
                          d:DataContext="{d:DesignInstance {x:Type ls:VMEquipmentSlot}, IsDesignTimeCreatable=True}"
                          Height="{StaticResource HotbarSlotSize}" Width="{StaticResource HotbarSlotSize}"
                          Background="Transparent">
                        <Grid.ToolTip>
                            <ls:LSTooltip Content="{Binding DataContext.Item, ElementName=Root}"
                                          ls:TooltipExtender.Owner="{Binding Path=(ls:TooltipExtender.Owner), ElementName=WeaponSlots}"/>
                        </Grid.ToolTip>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="MouseLeftButtonDown">
                                <ls:LSPlaySound Sound="UI_Shared_Secondary_Press"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseEnter">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                                <b:InvokeCommandAction
                                        Command="{Binding DataContext.SetDebugUIEntityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                        CommandParameter="{Binding Item.EntityHandle}"/>
                            </b:EventTrigger>
                            <b:EventTrigger EventName="MouseLeave">
                                <b:InvokeCommandAction
                                        Command="{Binding DataContext.ClearDebugUIEntityCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                        <ContentPresenter ContentTemplate="{StaticResource Template.ItemEquipment}"
                                          Content="{Binding Item}" IsHitTestVisible="False"/>
                        <Image x:Name="hl" Width="{StaticResource HotbarAttackSlotSize}"
                               Height="{StaticResource HotbarAttackSlotSize}" Stretch="Uniform"
                               Source="{StaticResource FrameWeaponSlotHover}" Visibility="Collapsed"/>
                        <Image x:Name="StatusIcon" Source="{StaticResource IconConditionMark}" Stretch="None"
                               HorizontalAlignment="Right" VerticalAlignment="Top"
                               Visibility="{Binding Item.NonPermanentStatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}}"
                               Margin="0,8,10,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Item}" Value="{x:Null}">
                            <Setter TargetName="StatusIcon" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Root" Property="ToolTipService.IsEnabled" Value="False"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="hl" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Storyboard x:Key="ShowSingleHotBar" Duration="{StaticResource SingleHotbarAnimationsDuration}">
                    <ThicknessAnimation Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                        From="{StaticResource SingleHotbarHiddenMargin}"
                                        To="{StaticResource SingleHotbarMargin}" Storyboard.TargetProperty="Margin"
                                        Storyboard.TargetName="SingleHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                     To="0.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                     To="0.0" Storyboard.TargetProperty="Opacity"
                                     Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="ShowSingleHotBarFromLeft" Duration="{StaticResource SingleHotbarAnimationsDuration}">
                    <ThicknessAnimation Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                        From="{StaticResource SingleHotbarFromLeftHiddenMargin}"
                                        To="{StaticResource SingleHotbarFromLeftMargin}"
                                        Storyboard.TargetProperty="Margin" Storyboard.TargetName="SingleHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                     To="0.0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                     To="0.0" Storyboard.TargetProperty="Opacity"
                                     Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="ShowCustomHotBar" Duration="{StaticResource ExtraDecksResizeDuration}">
                    <ThicknessAnimation Duration="{StaticResource ExtraDecksResizeDuration}"
                                        From="{StaticResource FixedHotbarHiddenMargin}"
                                        To="{StaticResource FixedHotbarMargin}" Storyboard.TargetProperty="Margin"
                                        Storyboard.TargetName="CustomHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="0.0"
                                     Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="1"
                                     Storyboard.TargetProperty="Opacity"
                                     Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="ShowPassivesHotBar" Duration="{StaticResource ExtraDecksResizeDuration}">
                    <ThicknessAnimation Duration="{StaticResource ExtraDecksResizeDuration}"
                                        From="{StaticResource FixedHotbarHiddenMargin}"
                                        To="{StaticResource FixedHotbarMargin}" Storyboard.TargetProperty="Margin"
                                        Storyboard.TargetName="PassivesHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="0.0"
                                     Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="1"
                                     Storyboard.TargetProperty="Opacity"
                                     Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="HideSingleHotBar" Duration="{StaticResource SingleHotbarAnimationsDuration}">
                    <ThicknessAnimation Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                        To="{StaticResource SingleHotbarHiddenMargin}"
                                        Storyboard.TargetProperty="Margin" Storyboard.TargetName="SingleHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                     To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                     To="1" Storyboard.TargetProperty="Opacity"
                                     Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="HideSingleHotBarToLeft" Duration="{StaticResource SingleHotbarAnimationsDuration}">
                    <ThicknessAnimation Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                        To="{StaticResource SingleHotbarFromLeftHiddenMargin}"
                                        Storyboard.TargetProperty="Margin" Storyboard.TargetName="SingleHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                     To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource SingleHotbarAnimationsDuration}"
                                     To="1" Storyboard.TargetProperty="Opacity"
                                     Storyboard.TargetName="HotbarsBehindSingleHotbar">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="HideCustomHotBar" Duration="{StaticResource ExtraDecksResizeDuration}">
                    <ThicknessAnimation Duration="{StaticResource ExtraDecksResizeDuration}"
                                        To="{StaticResource FixedHotbarHiddenMargin}" Storyboard.TargetProperty="Margin"
                                        Storyboard.TargetName="CustomHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="1"
                                     Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="HidePassivesHotBar" Duration="{StaticResource ExtraDecksResizeDuration}">
                    <ThicknessAnimation Duration="{StaticResource ExtraDecksResizeDuration}"
                                        To="{StaticResource FixedHotbarHiddenMargin}" Storyboard.TargetProperty="Margin"
                                        Storyboard.TargetName="PassivesHotBar">
                        <ThicknessAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </ThicknessAnimation.EasingFunction>
                    </ThicknessAnimation>
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ExtraDecksResizeDuration}" To="1"
                                     Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <Storyboard x:Key="ShowConcertina" Duration="{StaticResource ShowConcertinaDuration}">
                    <DoubleAnimation FillBehavior="Stop" Duration="{StaticResource ShowConcertinaDuration}" To="1"
                                     Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Concertina">
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseIn"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>

                <BitmapImage x:Key="DefaultHotBarBtnBg"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_default_d.png"/>
                <BitmapImage x:Key="IconRTNoArrow"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_RT_d_noArrow.png"/>

                <ControlTemplate x:Key="EnterFTBTemplate" TargetType="ls:LSButton">
                    <Grid ToolTip="{StaticResource PlacementParentDCTooltip}" ToolTipService.Placement="Center"
                          ToolTipService.VerticalOffset="-100" ToolTipService.ShowOnDisabled="True">
                        <Image x:Name="img" Source="{StaticResource DefaultHotBarBtnBg}" Stretch="None"/>
                        <Image x:Name="ico" Source="{StaticResource IconHourglass}" Stretch="None" Visibility="Visible"
                               Margin="0,-4,0,0"/>
                        <Grid x:Name="AnimChrono" Visibility="Hidden">
                            <Image x:Name="icoAnim" Source="{StaticResource IconRTNoArrow}" Stretch="None"
                                   Margin="0,-4,0,0"/>
                            <Path x:Name="Arrow" Stretch="None" Width="88" Height="88" StrokeThickness="0"
                                  Stroke="#88000000" Fill="White" RenderTransformOrigin="0.5,0.534">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                                <Path.Data>
                                    <Geometry>M40,51 V45 L68,23 L47,51 Z</Geometry>
                                </Path.Data>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="img" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_default_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="img" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_default_p.png"/>
                            <Setter TargetName="ico" Property="Margin" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Source" Value="{StaticResource DefaultHotBarBtnBg}"/>
                            <Setter TargetName="ico" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="AnimChrono" Property="Visibility" Value="Visible"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="ChronoAnim">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AnimChrono"
                                                                       Storyboard.TargetProperty="Opacity"
                                                                       RepeatBehavior="Forever">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.5"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="ChronoAnim"/>
                            </Trigger.ExitActions>
                        </Trigger>

                        <DataTrigger
                                Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                Value="False">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="FTBRotateAnim">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.IsEnabled)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="False"/>
                                            <DiscreteBooleanKeyFrame KeyTime="{StaticResource TurnTime}" Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Arrow"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                            <LinearDoubleKeyFrame KeyTime="{StaticResource TurnTime}" Value="360"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>

                        <!-- When switching from a character in combat to a character in real-time, we don't want to have the 6s wait until entering FTB -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
                                        Binding="{Binding DataContext.CurrentPlayer.IsSelectingCharacter, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                        Value="True"/>
                                <Condition
                                        Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                        Value="False"/>
                                <Condition
                                        Binding="{Binding DataContext.CurrentPlayer.PreviousSelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                        Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <StopStoryboard BeginStoryboardName="FTBRotateAnim"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                            <StopStoryboard BeginStoryboardName="FTBStrokeAnim1"/>
                            <StopStoryboard BeginStoryboardName="FTBRotateAnim"/>
                            <StopStoryboard BeginStoryboardName="ChronoAnim"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <BitmapImage x:Key="ButtonEndTurnScaled"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_endTurn_scaled_d.png"/>

                <ControlTemplate x:Key="EndTurnTemplate" TargetType="ls:LSButton">
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Stretch">
                        <Image x:Name="img" Source="{StaticResource ButtonEndTurnScaled}" Stretch="None"/>
                        <Image x:Name="ico" Source="{StaticResource IconHourglassActive}" VerticalAlignment="Top"
                               Stretch="None" RenderTransformOrigin="0.5,0.5" Margin="0,44,0,0" Visibility="Collapsed">
                            <Image.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Image.RenderTransform>
                        </Image>
                        <TextBlock x:Name="CenterTitle"
                                   Text="{Binding Source='h917f2b48g8735g4f9fgb529ga520b53eb2ed', Converter={StaticResource TranslatedStringConverter}}"
                                   TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center"
                                   FontSize="{StaticResource MediumFontSize}"
                                   Foreground="{StaticResource LS_extraspecialTxtColor}" TextWrapping="Wrap"
                                   MaxWidth="158" LineHeight="{StaticResource MediumFontSize}"
                                   LineStackingStrategy="BlockLineHeight"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="img" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_endTurn_scaled_h.png"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="img" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_endTurn_scaled_p.png"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="img" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_endTurn_scaled_disabled_d.png"/>
                            <Setter TargetName="ico" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_hourglass_disabled.png"/>
                            <Setter TargetName="ico" Property="VerticalAlignment" Value="Center"/>
                            <Setter TargetName="ico" Property="Margin" Value="0"/>
                            <Setter TargetName="CenterTitle" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ico" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <DataTrigger
                                Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.CanEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                Value="True">
                            <DataTrigger.EnterActions>
                                <StopStoryboard BeginStoryboardName="currentTurnAnim2"/>
                                <BeginStoryboard x:Name="currentTurnAnim">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.IsEnabled)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ico"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="360"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>

                        <DataTrigger
                                Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.CanEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                Value="False">
                            <DataTrigger.EnterActions>
                                <StopStoryboard BeginStoryboardName="currentTurnAnim"/>
                                <BeginStoryboard x:Name="currentTurnAnim2">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames
                                                Storyboard.TargetProperty="(UIElement.IsEnabled)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.0" Value="False"/>
                                        </BooleanAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="1x" Storyboard.TargetName="ico"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="180">
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ico"
                                                                       Storyboard.TargetProperty="Opacity"
                                                                       RepeatBehavior="Forever">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0.5"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.4" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="currentTurnAnim2"/>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ico"
                                                                       Storyboard.TargetProperty="Opacity">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>

                        <DataTrigger
                                Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.PlayerCharacterProperties.HasCancelEndTurnTimeout, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                Value="True">
                            <Setter TargetName="CenterTitle" Property="Text"
                                    Value="{Binding Source='h59defd55gea7cg4879gaa14g1ba594940649', Converter={StaticResource TranslatedStringConverter}}"/>
                        </DataTrigger>

                        <DataTrigger
                                Binding="{Binding Path=DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="rotateAnimBS">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ico"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="-180"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut"/>
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                        <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                            <StopStoryboard BeginStoryboardName="currentTurnAnim"/>
                            <StopStoryboard BeginStoryboardName="currentTurnAnim2"/>
                            <StopStoryboard BeginStoryboardName="rotateAnimBS"/>
                            <StopStoryboard BeginStoryboardName="AnimateStrokeBS1"/>
                            <StopStoryboard BeginStoryboardName="AnimateStrokeBS2"/>
                            <StopStoryboard BeginStoryboardName="HighlightEndTurn"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Storyboard x:Key="ShowRestButtonsAnimation">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RestSubButtons"
                                                   Storyboard.TargetProperty="Height">
                        <EasingDoubleKeyFrame KeyTime="{StaticResource RestButtonAnimationTime}" Value="420">
                            <EasingDoubleKeyFrame.EasingFunction>
                                <CubicEase EasingMode="EaseOut"/>
                            </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                    </DoubleAnimationUsingKeyFrames>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="RestSubButtons"
                                                    Storyboard.TargetProperty="(ls:TutorialProperties.IsAnimating)">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                        <DiscreteBooleanKeyFrame KeyTime="{StaticResource RestButtonAnimationTime}" Value="False"/>
                    </BooleanAnimationUsingKeyFrames>
                </Storyboard>

                <Storyboard x:Key="HideRestButtonsAnimation">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="RestSubButtons"
                                                   Storyboard.TargetProperty="Height">
                        <EasingDoubleKeyFrame KeyTime="{StaticResource RestButtonAnimationTime}" Value="0">
                            <EasingDoubleKeyFrame.EasingFunction>
                                <CubicEase EasingMode="EaseOut"/>
                            </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                    </DoubleAnimationUsingKeyFrames>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetName="RestSubButtons"
                                                    Storyboard.TargetProperty="(ls:TutorialProperties.IsAnimating)">
                        <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                        <DiscreteBooleanKeyFrame KeyTime="{StaticResource RestButtonAnimationTime}" Value="False"/>
                    </BooleanAnimationUsingKeyFrames>
                </Storyboard>

                <Style x:Key="SubMenuItemStyle" TargetType="MenuItem">
                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                    <Setter Property="StaysOpenOnClick" Value="False"/>

                    <!-- Sub-menu items are supposed to be inside a Popup, so their SubmenuLayer property is filled in the Popup.
                        Since we are not going to use a Popup because we want the subitems to be part of the visual tree, we need
                        to mark them as non-focusable; otherwise, they will try to access their SubmenuLayer property when the main
                        MenuItem loses its focus, and that property will be null so it will trigger an assert (in the best cases). -->
                    <Setter Property="Focusable" Value="False"/>
                </Style>

                <Style x:Key="HotbarGeneralDescriptionStyle" TargetType="TextBlock">
                    <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="FontSize" Value="{StaticResource SmallFontSize}"/>
                </Style>

                <ControlTemplate x:Key="ThrowFilterToggleIconButtonTemplate" TargetType="RadioButton">
                    <Grid>
                        <Image x:Name="background" Source="{StaticResource BtnSmallRound}" Stretch="None"/>
                        <Image x:Name="icon" Source="{DynamicResource IconNormal}" Stretch="Uniform" Width="64"
                               Height="64" Opacity="0.65"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="background" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png"/>
                            <Setter TargetName="icon" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="background" Property="Source"
                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_p.png"/>
                            <Setter TargetName="icon" Property="Opacity" Value="1"/>
                            <Setter TargetName="icon" Property="Margin" Value="0,6,0,0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource IconHighlight}"/>
                            <Setter TargetName="icon" Property="Opacity" Value="0.9"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="icon" Property="Source" Value="{DynamicResource IconHighlight}"/>
                            <Setter TargetName="icon" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <Style x:Key="MainPiesStyle" TargetType="ls:LSPie">
                    <Setter Property="SweepDirection" Value="Counterclockwise"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <RotateTransform Angle="180" CenterX="142" CenterY="142"/>
                        </Setter.Value>
                    </Setter>
                </Style>


                <BitmapImage x:Key="BarBody"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body.png"/>
                <BitmapImage x:Key="SideBarBody"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_bodyextra_x2.png"/>
                <BitmapImage x:Key="BarResources"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_resources.png"/>
                <BitmapImage x:Key="BoxResourceBg"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/neo/box_resource_empty.png"/>
                <BitmapImage x:Key="BoxResource"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/neo/box_resource_d.png"/>
                <BitmapImage x:Key="BoxResourceH"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/neo/box_resource_h.png"/>
                <BitmapImage x:Key="BoxResourceDisabled"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/neo/box_resource_missing.png"/>
                <BitmapImage x:Key="BarBottomBg"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_bottomBg.png"/>
                <BitmapImage x:Key="BarBottom"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_bottom.png"/>
                <BitmapImage x:Key="IconConcertina"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_concertina.png"/>
                <BitmapImage x:Key="BtnConcertina"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_d.png"/>
                <BitmapImage x:Key="BtnConcertinaActive"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_concertina_active_d.png"/>
                <BitmapImage x:Key="BtnActiveModArrowRed"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_activemod_arrowRed.png"/>
                <BitmapImage x:Key="BtnActiveMod"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pil_activemod_d.png"/>
                <BitmapImage x:Key="BarBodyPortrait"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body_portrait.png"/>
                <BitmapImage x:Key="BtnSheet"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_sheet_d.png"/>
                <BitmapImage x:Key="OverlayExtraHP"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/overlay_extraHP.png"/>
                <BitmapImage x:Key="OverlayExtraHPFill"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/overlay_extraHP_fill.png"/>
                <BitmapImage x:Key="IconExtraHP"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_extraHP.png"/>
                <BitmapImage x:Key="PaneConditions1"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/pane_conditions_1row.png"/>
                <BitmapImage x:Key="PaneConditions2"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/pane_conditions_2rows.png"/>
                <BitmapImage x:Key="PaneConditions"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/pane_conditions.png"/>
                <BitmapImage x:Key="StatusBg"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/statusBG.png"/>
                <BitmapImage x:Key="StatusBgFill"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/statusBG_fill.png"/>
                <BitmapImage x:Key="WeaponsBarX2"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_weaponsBar_x2.png"/>
                <BitmapImage x:Key="BtnWeaponsToggle"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_hb_unselected_d.png"/>
                <BitmapImage x:Key="IconDualwieldOff"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_dualwield_Off.png"/>
                <BitmapImage x:Key="ShutterSlideBg"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/shutterSlide_bg.png"/>
                <BitmapImage x:Key="BarBodyBtnGroup"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body_buttonGroup.png"/>
                <BitmapImage x:Key="BtnSmallDefault"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_small_default_d.png"/>
                <BitmapImage x:Key="IconCamp"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_camp_d.png"/>
                <BitmapImage x:Key="BtnPop"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/btn_pop_d.png"/>
                <BitmapImage x:Key="IconShortRest"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_shortRest_d.png"/>
                <BitmapImage x:Key="IconShortRestNode"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_shortRest_node.png"/>
                <BitmapImage x:Key="IconLongRest"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_longRest_d.png"/>
                <BitmapImage x:Key="LevelUPFrame"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/holder_levelupBtn.png"/>
                <BitmapImage x:Key="ExitFTBBg"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/bar_body_buttongGroup_scalingHolder.png"/>
                <BitmapImage x:Key="ExitFTBIcon"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_exit_d.png"/>
                <BitmapImage x:Key="ExitFTBIconHighlight"
                             UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_exit_h.png"/>
            </ControlTemplate.Resources>

            <Grid x:Name="StatusPanel" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="-35,-180,0,180"
                  Visibility="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}}">
                <Rectangle x:Name="Gradient" Margin="10,0,10,36" IsHitTestVisible="False">
                    <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0,1" EndPoint="0,0">
                            <GradientStop Color="#FF000000"/>
                            <GradientStop Color="#00000000" Offset="1"/>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>
                <Image x:Name="PaneConditionsBg" Source="{StaticResource PaneConditions}" Stretch="None"
                       VerticalAlignment="Bottom" HorizontalAlignment="Center" IsHitTestVisible="False"/>
                <StackPanel VerticalAlignment="Bottom" HorizontalAlignment="Center">
                    <Grid x:Name="Overflow" Margin="80,0,0,0"
                          Visibility="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource StatusLimitAmount}}">
                        <Image Source="{StaticResource OverflowNumberBg}" Stretch="None"
                               Visibility="{Binding Path=IsChecked, ElementName=ExpandToggle, Converter={StaticResource BoolToCollapsedConverter}}"
                               Margin="0,-8"/>
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"
                                   FontSize="{StaticResource SmallFontSize}"
                                   Foreground="{StaticResource LS_baseTxtColor}"
                                   ls:TextBlockFormatter.SourceText="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count, StringFormat='{}+{0}', Converter={StaticResource AddConverter}, ConverterParameter={StaticResource StatusLimitAmountInverse}}"
                                   Visibility="{Binding Path=IsChecked, ElementName=ExpandToggle, Converter={StaticResource BoolToCollapsedConverter}}"/>
                        <ls:LSToggleButton x:Name="ExpandToggle" HorizontalAlignment="Center" VerticalAlignment="Center"
                                           Margin="0,0,80,0">
                            <ls:LSToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ls:LSToggleButton}">
                                    <Grid>
                                        <Image x:Name="Background" Source="{StaticResource BtnSmallRound}"
                                               Stretch="None"/>
                                        <Image x:Name="Arrow" Margin="2,0,0,0" Source="{StaticResource IconDownArrow}"
                                               Stretch="None" RenderTransformOrigin="0.5, 0.5"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Path=IsChecked, ElementName=ExpandToggle}"
                                                     Value="False">
                                            <Setter Property="RenderTransform" TargetName="Arrow">
                                                <Setter.Value>
                                                    <ScaleTransform ScaleY="-1"/>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Background" Property="Source"
                                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_round_h.png"/>
                                            <Setter TargetName="Arrow" Property="Source"
                                                    Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_downArrow_h.png"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ls:LSToggleButton.Template>

                            <ls:LSToggleButton.Style>
                                <Style TargetType="ls:LSToggleButton">
                                    <Style.Triggers>
                                        <!-- Auto collapse when # statuses goes below limit again -->
                                        <DataTrigger
                                                Binding="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter={StaticResource StatusLimitAmount}}"
                                                Value="False">
                                            <Setter Property="IsChecked" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSToggleButton.Style>
                        </ls:LSToggleButton>
                    </Grid>
                    <ItemsControl ItemsSource="{Binding CurrentPlayer.SelectedCharacter.StatusEffects}"
                                  AlternationCount="{Binding CurrentPlayer.SelectedCharacter.StatusEffects.Count}"
                                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                  ScrollViewer.VerticalScrollBarVisibility="Disabled" MaxWidth="240" Margin="0,0,0,32">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel Orientation="Horizontal" VerticalAlignment="Bottom"
                                           HorizontalAlignment="Center">
                                    <!-- Flip the list left/right and up/down. This also affects the items so we have to 'unflip' those individually as well -->
                                    <WrapPanel.LayoutTransform>
                                        <ScaleTransform ScaleX="-1" ScaleY="-1"/>
                                    </WrapPanel.LayoutTransform>
                                </WrapPanel>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Margin" Value="-2"/>
                                <Setter Property="LayoutTransform">
                                    <Setter.Value>
                                        <!-- 'Negates' the flipping of the list -->
                                        <ScaleTransform ScaleX="-1" ScaleY="-1"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <!-- Always allow showing up to at least the limit -->
                                    <DataTrigger
                                            Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource StatusLimitAmount}}"
                                            Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsChecked, ElementName=ExpandToggle}"
                                                 Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ItemsControl.ItemContainerStyle>

                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Grid ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right">
                                    <Image Source="{StaticResource StatusBg}" Stretch="None"/>
                                    <Ellipse Width="48" Height="48" VerticalAlignment="Center"
                                             HorizontalAlignment="Center" Fill="{Binding Icon}"/>
                                    <ls:LSPie x:Name="Progression" Value="{Binding RemainingPercentage}"
                                              SweepDirection="Clockwise" RenderTransformOrigin="0.5 0.5">
                                        <Image Source="{StaticResource StatusBgFill}" Stretch="UniformToFill" Width="60"
                                               Height="60" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    </ls:LSPie>
                                    <Label VerticalAlignment="Bottom" HorizontalAlignment="Center"
                                           IsHitTestVisible="False" Content="{Binding Duration}" Margin="0,0,0,-8"
                                           Foreground="{StaticResource LS_tint100}" FontWeight="Bold"
                                           FontSize="{StaticResource SmallFontSize}" noesis:Text.Stroke="Black"
                                           noesis:Text.StrokeThickness="4"
                                           Visibility="{Binding Duration, Converter={StaticResource CountToVisibilityConverter}}"/>
                                </Grid>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </Grid>
        </ControlTemplate>
    </ls:UIWidget.Template>

</ls:UIWidget>